
Situaci√≥n
Est√°s desarrollando una API para una aplicaci√≥n que se va a usar en una biblioteca comunitaria de barrio. La app se usa para gestionar el movimiento de libros entre vecinos. No es una biblioteca tradicional: los usuarios pueden donar, prestar y pedir libros, todo de manera voluntaria.

üéØ Tu objetivo
Dise√±√° la API RESTful completa para esta aplicaci√≥n.

Usuarios:
Se registran con nombre, email, y una direcci√≥n aproximada (para saber en qu√© zona est√°n).
No hay login con contrase√±a, por ahora es solo para probar funcionalidades (pod√©s asumir autenticaci√≥n m√°s adelante).

Libros:
Pueden ser donados por los usuarios.
Tienen t√≠tulo, autor, g√©nero y un estado (por ejemplo: "disponible", "prestado", "reservado").

Pr√©stamos:
Un usuario puede pedir prestado un libro de otro usuario.
El sistema debe guardar qui√©n lo pidi√≥, a qui√©n se lo pidi√≥, y el estado del pr√©stamo (pendiente, aceptado, rechazado, devuelto).
La entrega del libro se hace en persona, no hay log√≠stica automatizada.

Defin√≠ las entidades del sistema y sus relaciones.
Dise√±√° los endpoints REST: rutas, m√©todos HTTP, estructuras de datos.
Pens√° los controllers: ¬øqu√© l√≥gica manejar√≠a cada uno?
*Pens√° en validaciones necesarias (por ejemplo, ¬øpuede alguien pedir prestado su propio libro?).
Errores comunes que ten√©s que manejar.
Organizaci√≥n del proyecto: carpetas, archivos, modularizaci√≥n.

-luego auten-autor con 3rdP

--------------------------------------
3 endpoints: books, users, lendings
-relaciones entre ellos dados por models-controllers

Usuarios (/users)
GET	/users		Listar todos los usuarios
GET	/users/:id		Ver info de un usuario espec√≠fico
POST	/users		Crear un nuevo usuario
PUT	/users/:id		Actualizar los datos de un usuario
DEL  /users/:id		Eliminar un usuario

Libros (/books)
GET	/books		Listar todos los libros (t√≠tulo, modo, estado)
GET	/books/:id		Detalle de un libro (info + estado disponibilidad)
POST	/books		Crear un nuevo libro (donado o privado)
PUT	/books/:id		Actualizar info de un libro
DEL  /books/:id		Eliminar un libro

Pr√©stamos (/lendings)
GET	/lendings		Listar todos los pr√©stamos
GET	/lendings/:id	Info de un pr√©stamo espec√≠fico
POST	/lendings		Crear una nueva solicitud de pr√©stamo
PUT	/lendings/:id	Aceptar / rechazar / marcar como devuelto, etc.
DEL  /lendings/:id	Cancelar solicitud (si est√° pendiente, por ejemplo)

podr√≠as considerar rutas como /users/:id/lendings para ver pr√©stamos de un usuario espec√≠fico.

--------------------------------------
Models:

Users:
_name
_email (unique)
_address


--------------------------------------
Routes/Controllers

